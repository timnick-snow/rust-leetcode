#![allow(dead_code)]
/*
330. 按要求补齐数组
困难
相关标签
相关企业
给定一个已排序的正整数数组 nums ，和一个正整数 n 。从 [1, n] 区间内选取任意个数字补充到 nums 中，使得 [1, n] 区间内的任何数字都可以用 nums 中某几个数字的和来表示。

请返回 满足上述要求的最少需要补充的数字个数 。



示例 1:

输入: nums = [1,3], n = 6
输出: 1
解释:
根据 nums 里现有的组合 [1], [3], [1,3]，可以得出 1, 3, 4。
现在如果我们将 2 添加到 nums 中， 组合变为: [1], [2], [3], [1,3], [2,3], [1,2,3]。
其和可以表示数字 1, 2, 3, 4, 5, 6，能够覆盖 [1, 6] 区间里所有的数。
所以我们最少需要添加一个数字。
示例 2:

输入: nums = [1,5,10], n = 20
输出: 2
解释: 我们需要添加 [2,4]。
示例 3:

输入: nums = [1,2,2], n = 5
输出: 0


提示：

1 <= nums.length <= 1000
1 <= nums[i] <= 104
nums 按 升序排列
1 <= n <= 231 - 1
 */
struct Solution;
/*
如果区间[1, x-1]内的数字已经覆盖，且x不在数组中，那么
必须要添加数字x，才能覆盖到x，且添加数字x后，覆盖区间将变成[1,2x-1]

证明：
区间[1,x-1]已覆盖，分别取出区间中的值与x相加可以得到覆盖区间[x,2x-1]
于是总覆盖区间 [1,x-1] ∪ [x,2x-1] = [1, 2x-1]

贪心方案，每次找到未被覆盖的最小整数x，然后补充x，继续寻找，重复这个步骤。


 */
impl Solution {
    pub fn min_patches(nums: Vec<i32>, n: i32) -> i32 {
        let mut ans = 0;
        let mut x = 1_i64;
        let mut idx = 0;
        while x <= n as i64 {
            if idx < nums.len() && nums[idx] as i64 <= x {
                x += nums[idx] as i64;
                idx += 1;
            } else {
                // 补充数字x  覆盖区间变成[1, 2x-1] 下一个未被覆盖2x
                x <<= 1;
                ans += 1;
            }
        }

        ans
    }
}