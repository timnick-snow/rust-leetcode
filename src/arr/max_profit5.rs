#![allow(dead_code)]
/*
309. 买卖股票的最佳时机含冷冻期
中等
相关标签
相关企业
给定一个整数数组prices，其中第  prices[i] 表示第 i 天的股票价格 。​

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。



示例 1:

输入: prices = [1,2,3,0,2]
输出: 3
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
示例 2:

输入: prices = [1]
输出: 0


提示：

1 <= prices.length <= 5000
0 <= prices[i] <= 1000
 */
struct Solution;

/*
定义状态dp[i][j]表示第i天状态为j时的最大收益

其中i表示第i天，j表示状态，其可以取值0，1，2
0 => 出售后不持股，下一天为冷冻期
1 => 持股
2 => 非出售后的不持股，今天可能是冷冻期也可能不是，但是下一天一定不是冷冻期



状态转移

0 => 2     前一天出售，今天是冷冻期，什么也做不了，只能变成状态2
1 => 0,1   前一天持股，今天可以卖出变为状态0，也可以继续持有股票保持状态1
2 => 1,2   前一天不持股，并且今天不是冷冻期，可以购入股票变为状态1，也可以什么都不做保持状态2

dp[i][0] = dp[i-1][1] + prices[i]
dp[i][1] = max(dp[i-1][1], dp[i-1][2]-prices[i])
dp[i][2] = max(dp[i-1][0], dp[i-1][2])


初始值
dp[0][0] = 0
dp[0][1] = -prices[0]
dp[0][2] = 0

状态转移方程只和前一天的状态有关，可以滚动数组
 */
impl Solution {
    pub fn max_profit(prices: Vec<i32>) -> i32 {
        let n = prices.len();
        let mut dp = [[0; 3]; 2];
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        dp[0][2] = 0;

        for i in 1..n {
            dp[i % 2][0] = dp[(i - 1) % 2][1] + prices[i];
            dp[i % 2][1] = std::cmp::max(dp[(i - 1) % 2][1], dp[(i - 1) % 2][2] - prices[i]);
            dp[i % 2][2] = std::cmp::max(dp[(i - 1) % 2][0], dp[(i - 1) % 2][2]);
        }
        std::cmp::max(dp[(n - 1) % 2][0], dp[(n - 1) % 2][2])
    }
}