#![allow(dead_code)]
/*
390. 消除游戏
中等
相关标签
相关企业
列表 arr 由在范围 [1, n] 中的所有整数组成，并按严格递增排序。请你对 arr 应用下述算法：

从左到右，删除第一个数字，然后每隔一个数字删除一个，直到到达列表末尾。
重复上面的步骤，但这次是从右到左。也就是，删除最右侧的数字，然后剩下的数字每隔一个删除一个。
不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。
给你整数 n ，返回 arr 最后剩下的数字。



示例 1：

输入：n = 9
输出：6
解释：
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
arr = [2, 4, 6, 8]
arr = [2, 6]
arr = [6]
示例 2：

输入：n = 1
输出：1


提示：

1 <= n <= 109
 */
struct Solution;

/*
观察示例1  每次删除数字后剩下的都是一个等差数列
我们维护等差数列的关键信息点，首项、公差、项数

模拟删除过程
1. 删除方向。  1 => 从左到右   -1 => 逆向  每轮变换方向
2. 首项。 方向为1时，首项变为第二项；方向为-1时，如果有偶数项，首项不变，如果有奇数项，首项变为第二项
3. 公差。初始公差为1，每轮翻倍
4. 项数。每轮减半

删除若干轮后，只剩下一个元素。
 */
impl Solution {
    pub fn last_remaining(n: i32) -> i32 {
        let mut dir = 1;
        let mut first = 1;
        let mut step = 1;
        let mut cnt = n;

        while cnt > 1 {
            if dir == 1 || cnt & 1 == 1 {
                first = first + step;
            }
            step <<= 1;
            cnt >>= 1;
            dir *= -1;
        }
        first
    }
}